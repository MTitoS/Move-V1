{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mthsi\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Code\\\\portfolio\\\\Move-V1\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"../contexts/ChallengesContext\";\nlet countdownTimeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setActive\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n\n  function startCountdown() {\n    setActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setActive(false);\n    setTime(25 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/mthsi/OneDrive/Área de Trabalho/Code/portfolio/Move-V1/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setActive","minutes","Math","floor","seconds","hasFinished","setHasFinished","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SACEA,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,IAAIC,gBAAJ;AAeA,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAC3C,EAD2C,CAAtC;AAIP,OAAO,SAASO,iBAAT,CAA2B;AAChCC,EAAAA;AADgC,CAA3B,EAEoB;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMW,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB;AAEA,QAAM;AAAA,OAACQ,WAAD;AAAA,OAAcC;AAAd,MAAgChB,QAAQ,CAAC,KAAD,CAA9C;;AAEA,WAASiB,cAAT,GAA0B;AACxBP,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAF,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACAQ,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAEDjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCS,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAN,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,OADK;AAELG,MAAAA,OAFK;AAGLC,MAAAA,WAHK;AAILN,MAAAA,QAJK;AAKLQ,MAAAA,cALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["import {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { ChallengesContext } from \"../contexts/ChallengesContext\";\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\ninterface CountdownContextData {\r\n  minutes: number;\r\n  seconds: number;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  startCountdown: () => void;\r\n  resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext(\r\n  {} as CountdownContextData\r\n);\r\n\r\nexport function CountdownProvider({\r\n  children,\r\n}: CountdownProviderProps) {\r\n  const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n  const [time, setTime] = useState(0.1 * 60);\r\n  const [isActive, setActive] = useState(false);\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  function startCountdown() {\r\n    setActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setActive(false);\r\n    setTime(25 * 60);\r\n    setHasFinished(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000);\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setActive(false);\r\n      startNewChallenge();\r\n    }\r\n  }, [isActive, time]);\r\n\r\n  return (\r\n    <CountdownContext.Provider\r\n      value={{\r\n        minutes,\r\n        seconds,\r\n        hasFinished,\r\n        isActive,\r\n        startCountdown,\r\n        resetCountdown,\r\n      }}\r\n    >\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}